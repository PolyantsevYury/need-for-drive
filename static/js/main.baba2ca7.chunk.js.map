{"version":3,"sources":["assets/images/icons/location_icon.svg","assets/images/icons/arrow_left_icon.svg","assets/images/icons/arrow_right_icon.svg","components/Sidebar.js","components/MainContent.js","components/Slider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SideBar","className","MainContent","src","locationIcon","alt","href","Slider","arrowLeft","key","arrowRight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,qLCG9BC,G,YAAU,WACrB,OACI,yBAAKC,UAAU,YACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,kBAAf,MAEF,yBAAKA,UAAU,YAAf,U,wBCLKC,EAAc,WACzB,OACI,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gBAAf,kBAGA,yBAAKA,UAAU,oBACb,yBAAKE,IAAKC,IAAcC,IAAI,KAC5B,0BAAMJ,UAAU,yBAAhB,4DAGJ,yBAAKA,UAAU,cACb,wBAAIA,UAAU,qBAAd,0DACY,6BACV,iDAEF,0BAAMA,UAAU,wBAAhB,wMAGA,4BAAQA,UAAU,UAAlB,mFAIF,4BAAQA,UAAU,UAChB,0BAAMA,UAAU,qBAAhB,yCACA,uBAAGK,KAAK,kBAAkBL,UAAU,kBAApC,wB,wCCzBGM,EAAS,WACpB,OACI,6BAASN,UAAU,UACjB,4BAAQA,UAAU,wCAChB,yBAAKE,IAAKK,IAAWH,IAAI,MAE3B,yBAAKJ,UAAU,mBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,sBAAd,iHACA,uBAAGA,UAAU,qBAAb,kjBAEA,4BAAQA,UAAU,uBAAlB,2DAEF,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,cAAcQ,IAAI,SAAlC,KACA,0BAAMR,UAAU,kCAAkCQ,IAAI,UACtD,0BAAMR,UAAU,cAAcQ,IAAI,YAClC,0BAAMR,UAAU,cAAcQ,IAAI,cAGtC,4BAAQR,UAAU,wCAChB,yBAAKE,IAAKO,IAAYL,IAAI,QCTrBM,EAVH,WACV,OACI,yBAAKV,UAAU,eACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAUW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.baba2ca7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/location_icon.b7637e29.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_left_icon.1267430e.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_right_icon.f9a6dc71.svg\";","import React from \"react\";\r\nimport '../styles/mainPage/SideBar.scss';\r\n\r\nexport const SideBar = () => {\r\n  return (\r\n      <nav className='side-bar'>\r\n        <div className='burger'>\r\n          <div className='burger__vector'> </div>\r\n        </div>\r\n        <div className='language'>\r\n          Eng\r\n        </div>\r\n      </nav>\r\n  )\r\n};","import React from \"react\";\r\nimport '../styles/mainPage/MainContent.scss';\r\nimport locationIcon from '../assets/images/icons/location_icon.svg'\r\n\r\nexport const MainContent = () => {\r\n  return (\r\n      <div className='main-content'>\r\n        <div className='header'>\r\n          <div className='header__logo'>\r\n            Need for drive\r\n          </div>\r\n          <div className='header__location'>\r\n            <img src={locationIcon} alt=\"\"/>\r\n            <span className='header__location-city'>Ульяновск</span>\r\n          </div>\r\n        </div>\r\n        <div className='hero-block'>\r\n          <h1 className='hero-block__title'>\r\n            Каршеринг <br/>\r\n            <span>Need for drive</span>\r\n          </h1>\r\n          <span className='hero-block__subtitle'>\r\n            Поминутная аренда авто твоего города\r\n          </span>\r\n          <button className='button'>\r\n            Забронировать\r\n          </button>\r\n        </div>\r\n        <footer className='footer'>\r\n          <span className='footer__copyright'>© 2016-2019 «Need for drive»</span>\r\n          <a href='tel:84952342244' className='footer__number'>8 (495) 234-22-44</a>\r\n        </footer>\r\n      </div>\r\n  )\r\n};","import React from \"react\";\r\nimport '../styles/mainPage/Slider.scss'\r\nimport arrowLeft from '../assets/images/icons/arrow_left_icon.svg'\r\nimport arrowRight from '../assets/images/icons/arrow_right_icon.svg'\r\n\r\nexport const Slider = () => {\r\n  return (\r\n      <section className='slider'>\r\n        <button className='slider__control slider__control-prev'>\r\n          <img src={arrowLeft} alt=\"\"/>\r\n        </button>\r\n        <div className='slider__content'>\r\n          <div className='slider__item'>\r\n            <h2 className='slider__item-title'>Бесплатная парковка</h2>\r\n            <p className='slider__item-info'>Оставляйте машину на платных городских\r\n              парковках и разрешенных местах, не нарушая ПДД, а также в аэропортах.</p>\r\n            <button className='slider__item-button'>Подробнее</button>\r\n          </div>\r\n          <div className='slider__dots'>\r\n            <span className='slider__dot' key=\"dot-1\"> </span>\r\n            <span className='slider__dot slider__dot--active' key=\"dot-2\"/>\r\n            <span className='slider__dot' key=\"radio-3\"/>\r\n            <span className='slider__dot' key=\"radio-4\"/>\r\n          </div>\r\n        </div>\r\n        <button className='slider__control slider__control-next'>\r\n          <img src={arrowRight} alt=\"\"/>\r\n        </button>\r\n      </section>\r\n  )\r\n};","import React from 'react';\r\nimport './styles/mainPage/App.scss';\r\n\r\nimport {SideBar} from \"./components/Sidebar\";\r\nimport {MainContent} from \"./components/MainContent\";\r\nimport {Slider} from \"./components/Slider\";\r\n\r\nconst App = () => {\r\n  return (\r\n      <div className='app-wrapper'>\r\n          <SideBar/>\r\n          <MainContent/>\r\n          <Slider/>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}